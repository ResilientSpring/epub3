###################################
Tools to parse ABBYY XML into EPUB3
###################################

This module transforms ABBYY XML documents, generated by ABBYY FineReader 10,
into primitively accessible ePub 3. The code is optimized for ABBYY XML
documents created by the Internet Archive, though it may work for other ABBYY
XML as well. 

********
Features
********

#. Unicode-compliant
#. Can handle left-to-right and right-to-left text.
#. Attempts to recognize running headers, footers, and decimal or page numbers.
   Level of confidence in fuzzy matching can be fine tuned in ``config.ini``.
   Errs on the side of minimizing false positives.

***********
Limitations
***********

#. Accessibility is inherently limited by the input ABBY FineReader documents. If
   they are marked up with headings and other semantic markup, that structure
   will be incorporated into the ePub.
#. There is currently no functionality for image description.
#. The module can also transform ABBYY XML documents generated by ABBYY
   FineReader 6. However, those documents are not marked up with headings, so
   there is no structural navigation for accessibility.

************
Requirements
************

* Python 3
* If running epubcheck, a Java Runtime environment

*****
Usage
*****

From within a Python program:

.. code:: python 

    from abbyy_to_epub3 import create_epub
    book = create_epub.Ebook('docname')  # See *Assumptions* below.
    book.craft_epub()

From the shell:

.. code:: bash 

     python bin/create_epub.py styleliterarymet00cadb

************
Installation
************

This package can be installed on your local system. From the directory
containing setup.py:

.. code:: bash 

    pip install -r requirements.txt
    python setup.py develop
    pip install .

You can rebuild the documentation, which is generated with Sphinx.

.. code:: bash 

   cd docs
   make html

System dependencies
===================

If you'd like to run `epubcheck <https://github.com/IDPF/epubcheck>`_, there
are certain system dependencies.  Depending on running environment, these may
need to be manually installed.  On Ubuntu, I installed these with:

.. code:: bash 

    sudo apt-get install default-jre libpython3-dev

Testing
=================

Run ``py.test`` from the top-level app directory. Create new tests in the ``tests``
subdirectory.

Assumptions
=================

This application assumes you are working in a directory which contains a
subdirectory for the document and a specific set of files. If the document is
named ``docname``, the directory structure assumed is:

.. code:: bash 

    docname/
        docname_abbyy.gz
        docname_meta.xml
        docname_jp2.zip

* ``docname_abbyy.gz`` unzips to ``docname_abbyy``, an XML file generated by
  ABBYY.
* ``docname_jp2.zip`` unzips to a directory called ``docname_jp2``, which includes
  a number of documents in the format ``docname_####.jp2``. 

   * ``docname_0000.jp2`` is scanner calibration.
   * ``docname_0001.jp2`` is the cover image and the first image reference in the
       ABBYY.

**********
Contribute
**********

* `Source code on GitHub <https://github.com/deborahgu/abbyy-to-epub3/issues>`_
* `Issue tracker <https://github.com/deborahgu/abbyy-to-epub3/issues>`_
